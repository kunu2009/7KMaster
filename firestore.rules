rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
  
    // Projects: Users can only read/write their own projects.
    match /projects/{projectId} {
      allow read, write: if isOwner(resource.data.userId);
    }
    
    // Skills: Users can only read/write their own skills.
    match /skills/{skillId} {
      allow read, write: if isOwner(resource.data.userId) || (request.method == 'read' && resource.data.userId == null);
    }
    
    // Habits: Users can only read/write their own habits.
    match /habits/{habitId} {
        allow read, write: if isOwner(resource.data.userId);
    }

    // HabitLogs: Users can only read/write their own habit logs.
    match /habitLogs/{logId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // TodayTasks: Users can only read/write their own tasks.
    match /todayTasks/{taskId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // TimeBlocks: Users can only read/write their own time blocks.
    match /timeBlocks/{blockId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // Notes: Users can only read/write their own notes.
    match /notes/{noteId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // SelfSpace (Journal): Users can only read/write their own entries.
    match /selfSpace/{itemId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // ResearchItems: Users can only read/write their own items.
    match /researchItems/{itemId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // UserMetrics (for streak, etc.): Users can only access their own document.
    match /userMetrics/{userId} {
        allow read, write: if isOwner(userId);
    }
  }
}
